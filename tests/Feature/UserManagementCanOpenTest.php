<?php

namespace Tests\Feature;

use App\Models\User;
use Auth;
use Illuminate\Foundation\Testing\WithFaker;
use Spatie\Permission\Models\Role;
use Tests\TestCase;

class UserManagementCanOpenTest extends TestCase
{

    use WithFaker;

    public function test_can_go_user_page()
    {
        Auth::loginUsingId(1);

        $res = $this->get(route('admin.users.index'));

        $res->assertOk()
            ->assertSeeInOrder(['Create User', 'Name', 'Role']);
    }

    public function test_can_go_user_detail_page()
    {
        Auth::loginUsingId(1);

        $res = $this->get(route('admin.users.show', 1));

        $res->assertOk()
            ->assertSeeInOrder(['ID', 'Name', 'Email', 'Role', 'Join at', 'Action', 'Send forget password link']);
    }

    public function test_can_go_user_create_page()
    {
        Auth::loginUsingId(1);

        $res = $this->get(route('admin.users.create', 1));

        $res->assertOk()
            ->assertSeeInOrder(['Name', 'Email', 'Password', 'Confirm Password', 'Role', 'Submit']);
    }

    public function test_can_create_user()
    {
        Auth::loginUsingId(1);
        $originalCount = User::count();

        $password = $this->faker->password;
        $email = $this->faker->email;
        $this->from(route('admin.users.create'))
            ->post(route('admin.users.store'), [
                'name' => $this->faker->name,
                'email' => $email,
                'password' => $password,
                'password_confirmation' => $password,
                'role' => Role::first()->id,
            ])
            ->assertValid();

        $this->assertEquals($originalCount + 1, User::count());
        $this->assertNotNull(User::where('email', $email)->first());
    }

    public function test_can_create_user_invalid()
    {
        Auth::loginUsingId(1);
        $originalCount = User::count();

        $password = $this->faker->password;
        $email = $this->faker->email;
        $this->from(route('admin.users.create'))
            ->post(route('admin.users.store'), [
                'name' => $this->faker->name,
                'email' => '',
                'password' => $password,
                'password_confirmation' => $password,
                'role' => Role::first()->id,
            ])
            ->assertInvalid()
            ->assertSessionHasErrors(['email']);

        $this->assertEquals($originalCount, User::count());
        $this->assertNull(User::where('email', $email)->first());

        $this->from(route('admin.users.create'))
            ->post(route('admin.users.store'), [
                'name' => $this->faker->name,
                'email' => $email,
                'password' => $password,
                'password_confirmation' => $password . '1',
                'role' => Role::first()->id,
            ])
            ->assertInvalid()
            ->assertSessionHasErrors(['password']);

        $this->assertEquals($originalCount, User::count());
        $this->assertNull(User::where('email', $email)->first());
    }

    public function test_can_go_user_edit_page()
    {
        Auth::loginUsingId(1);
        $user = User::first();
        $res = $this->get(route('admin.users.edit', $user));

        $res->assertOk()
            ->assertSeeInOrder(['Name', $user->name, 'Email', $user->email, 'Role', 'Submit']);
    }

    public function test_can_edit_user()
    {
        Auth::loginUsingId(1);
        $user = User::factory()->create();
        $new_name = $this->faker->name;
        $new_email = $this->faker->email;

        $this
            ->from(route('admin.users.edit', $user))
            ->put(route('admin.users.update', $user), [
                'name' => $new_name,
                'email' => $new_email,
                'role' => 1
            ])
            ->assertValid();

        $user = User::find($user->id);
        $this->assertEquals($new_name, $user->name);
        $this->assertEquals($new_email, $user->email);
        $this->assertTrue($user->hasRole('Super Admin'));
    }

    public function test_can_edit_user_invalid_case()
    {
        Auth::loginUsingId(1);

        $this
            ->from(route('admin.users.edit', 1))
            ->put(route('admin.users.update', 1), [
                'name' => '',
                'email' => '',
                'role' => 1
            ])
            ->assertInvalid()
            ->assertSessionHasErrors(['name', 'email']);
    }

    public function test_can_go_roles_page()
    {
        Auth::loginUsingId(1);

        $res = $this->get(route('admin.roles.index'));

        $res->assertOk()
            ->assertSeeInOrder(['Create New Role', 'ID', 'Name', 'Action']);
    }

    public function test_can_go_roles_create_page()
    {
        Auth::loginUsingId(1);

        $res = $this->get(route('admin.roles.create'));

        $res->assertOk()
            ->assertSeeInOrder(['Name', 'Permissions', 'Submit']);
    }

    public function test_can_create_role()
    {
        Auth::loginUsingId(1);

        $originalCount = Role::count();
        $name = $this->faker->name;
        $this->from(route('admin.roles.create'))
            ->post(route('admin.roles.store'), [
                'name' => $name,
                'permissions' => [1, 2]
            ])
            ->assertValid();

        $this->assertEquals($originalCount + 1, Role::count());
        $this->assertNotNull(Role::where('name', $name)->first());
    }

    public function test_can_create_role_invalid()
    {
        Auth::loginUsingId(1);

        $originalCount = Role::count();
        $name = $this->faker->name;
        $this->from(route('admin.roles.create'))
            ->post(route('admin.roles.store'), [
                'name' => '',
                'permissions' => [1, 2]
            ])
            ->assertInvalid()
            ->assertSessionHasErrors(['name']);

        $this->assertEquals($originalCount, Role::count());
        $this->assertNull(Role::where('name', $name)->first());

        $this->from(route('admin.roles.create'))
            ->post(route('admin.roles.store'), [
                'name' => $name,
                'permissions' => []
            ])
            ->assertInvalid()
            ->assertSessionHasErrors(['permissions']);

        $this->assertEquals($originalCount, Role::count());
        $this->assertNull(Role::where('name', $name)->first());

    }

    public function test_can_go_roles_detail_page()
    {
        Auth::loginUsingId(1);
        $role = Role::first();
        $res = $this->get(route('admin.roles.show', $role));

        $res->assertOk()
            ->assertSeeInOrder(['ID', $role->id, 'Name', $role->name, 'Permissions'])
            ->assertSee($role->permissions()->get()->pluck('name')->toArray());
    }

    public function test_can_go_roles_edit_page()
    {
        Auth::loginUsingId(1);
        $role = Role::first();
        $res = $this->get(route('admin.roles.edit', $role));

        $res->assertOk()
            ->assertSeeInOrder(['Name', $role->name, 'Permissions', 'Submit']);
    }

    public function test_can_edit_role()
    {
        Auth::loginUsingId(1);
        $role = Role::findById(2);
        $new_name = $this->faker->name;
        $this->from(route('admin.roles.edit', $role))
            ->put(route('admin.roles.update', $role), [
                'name' => $new_name,
                'permissions' => [1, 2]
            ])
            ->assertValid();


        $this->assertEquals($new_name, Role::findById($role->id)->name);
        $this->assertNotNull(Role::where('name', $new_name)->first());
    }

    public function test_can_edit_role_invalid()
    {
        Auth::loginUsingId(1);
        $role = Role::findById(2);

        $this->from(route('admin.roles.edit', $role))
            ->put(route('admin.roles.update', $role), [
                'name' => '',
                'permissions' => [1, 2]
            ])
            ->assertInvalid()
            ->assertSessionHasErrors(['name']);

        $this->assertEquals($role->name, Role::findById($role->id)->name);
    }

    public function test_can_go_permissions_page()
    {
        Auth::loginUsingId(1);

        $res = $this->get(route('admin.permissions.index'));

        $res->assertOk();
    }

    public function test_can_go_permissions_detail_page()
    {
        Auth::loginUsingId(1);

        $res = $this->get(route('admin.permissions.show', 1));

        $res->assertOk();
    }
}
